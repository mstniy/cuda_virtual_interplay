#ifndef CUDA_MEMORY_H
#define CUDA_MEMORY_H

#include <new>
#include <memory>
#include <type_traits>

template<typename T>
class CUDAUnifiedDeleter_
{
public:
	void operator()(T* t)
	{
		cudaDeviceSynchronize();
		t->~T();
		cudaFree(t);
	}
};

template<typename T>
class CUDADeviceDeleter_
{
public:
	void operator()(T* t)
	{
		cudaFree(t);
	}
};

// ----------------------------------------------------------------------------


template<typename T, typename = std::enable_if_t<!std::is_array<T>::value>>
using unified_unique_ptr = std::unique_ptr<T, CUDAUnifiedDeleter_<T>>;

template<class T> struct _Unified_Unique_if {typedef unified_unique_ptr<T> _Single_object;};
template<class T> struct _Unified_Unique_if<T[]> {typedef unified_unique_ptr<T[]> _Unknown_bound;};
template<class T, size_t N> struct _Unified_Unique_if<T[N]> {typedef void _Known_bound;};

template<class T, class... Args>
typename _Unified_Unique_if<T>::_Single_object make_unified_unique(Args&&... args)
{
	T* ptr;
	if (cudaSuccess != cudaMallocManaged((void **)&ptr, sizeof(T)))
		throw std::bad_alloc();
	try
	{
		new (ptr) T(std::forward<Args>(args)...);
	}
	catch (...)
	{
		cudaFree(ptr);
		throw;
	}
	return unified_unique_ptr<T>(ptr);
}

template<class T>
typename _Unified_Unique_if<T>::_Unknown_bound make_unified_unique(size_t n) = delete; // Use UnifiedArray

template<class T, class... Args>
typename _Unified_Unique_if<T>::_Known_bound make_unified_unique(Args&&...) = delete; // Use UnifiedArray


// ----------------------------------------------------------------------------

template<typename T, typename = std::enable_if_t<std::is_trivially_destructible<typename std::remove_extent<T>::type>::value>>
using device_unique_ptr = std::unique_ptr<T, CUDADeviceDeleter_<typename std::remove_extent<T>::type>>;

template<class T> struct _Device_Unique_if {typedef device_unique_ptr<T> _Single_object;};
template<class T> struct _Device_Unique_if<T[]> {typedef device_unique_ptr<T[]> _Unknown_bound;};
template<class T, size_t N> struct _Device_Unique_if<T[N]> {typedef void _Known_bound;};

template<class T, class... Args>
typename _Device_Unique_if<T>::_Single_object make_device_unique(Args&&... args)
{
	static_assert(std::is_trivially_constructible<T, Args...>::value, "make_device_unique requires trivial constructor");
	T* ptr;
	if (cudaSuccess != cudaMalloc((void **)&ptr, sizeof(T)))
		throw std::bad_alloc();
	return device_unique_ptr<T>(ptr);
}

template<class T>
typename _Device_Unique_if<T>::_Unknown_bound make_device_unique(size_t n)
{
	using U = typename std::remove_extent<T>::type;
	static_assert(std::is_trivially_default_constructible<U>::value, "make_device_unique requires trivial constructor");
	U* ptr;
	if (cudaSuccess != cudaMalloc((void **)&ptr, sizeof(U)*n))
		throw std::bad_alloc();
	return device_unique_ptr<U[]>(ptr);
}

template<class T, class... Args>
typename _Device_Unique_if<T>::_Known_bound make_device_unique(Args&&...) = delete;

#endif
